@using labyrinth
@inject ILogger<MazeComponent> logger;

<h1>@Title</h1>

<div class="row">
<button class="btn btn-primary col-auto" @onclick=generate>Generate</button>
</div>
<div class="row">
<MermaidJS.Blazor.MermaidDiagram Definition=@String.Join("\n", nodes) />
</div>

<label>Solution:
    <input @bind=solution />
</label>
<button @onclick=solve>Solve</button>
@if (solved)
{
    <h1>You win!</h1>
}

@code
{
    [Parameter]
    public string Title { get; set; }

    [CascadingParameter]
    public string MazeSeed { get; set; }

    List<string> nodes = new();
    string solution;
    bool solved = false;
    void solve()
    {

    }

    void generate()
    {
        nodes = takeStep(MazeUtilities.mazeFor(MazeSeed));
    }

     List<string> takeStep(MazeCell cell)
    {
        var visited = new List<MazeLink>();
        List<string> diagram = new();
        diagram.Add("graph TD");
        diagram.Add("start");

        takeStep(cell, visited, diagram);

        return diagram;
    }

    List<string> takeStep(MazeCell cell, List<MazeLink> visited, List<string> diagram)
    {
        if (cell.East != null)
        {
            var link = new MazeLink(cell, cell.East, "East");
            if (visited.Contains(link) is false)
            {
                logger.LogInformation($"Moving East from {cell.Id} to {cell.East.Id}");
                visited.Add(link);
                diagram.Add(link.ToString());
                takeStep(cell.East, visited, diagram);
            }
        }
        if (cell.South != null)
        {
            var link = new MazeLink(cell, cell.South, "South");
            if (visited.Contains(link) is false)
            {
                logger.LogInformation($"Moving South from {cell.Id} to {cell.South.Id}");
                visited.Add(link);
                diagram.Add(link.ToString());
                takeStep(cell.South, visited, diagram);
            }
        }
        if (cell.West != null)
        {
            var link = new MazeLink(cell, cell.West, "West");
            if (visited.Contains(link) is false)
            {
                logger.LogInformation($"Moving West from {cell.Id} to {cell.West.Id}");
                visited.Add(link);
                diagram.Add(link.ToString());
                takeStep(cell.West, visited, diagram);
            }
        }
        if (cell.North != null)
        {
            var link = new MazeLink(cell, cell.North, "North");
            if (visited.Contains(link) is false)
            {
                logger.LogInformation($"Moving North from {cell.Id} to {cell.North.Id}");
                visited.Add(link);
                diagram.Add(link.ToString());
                takeStep(cell.North, visited, diagram);
            }
        }
        return diagram;
    }
}